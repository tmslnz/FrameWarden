#tag ClassProtected Class Node	#tag Method, Flags = &h0		Sub CheckData()		  Dim status as Boolean		  		  if NOT me.ClientSocket.IsConnected then		    me.ClientSocket.Connect		  end if		  		  me.DoCheckClientSocketData()		  		  if WaitTime > Ticks() then		    return		  elseif WaitTime <> 0 then		    me.ModoSocket.ReadyForNextCommand = True		    WaitTime = 0		  end if		  		  // Make sure we mark any old frames as completed if they indeed are		  MarkOldFrameAsCompleted()		  		  // This is the main chunk of code in this Method		  if TheFarm.GetSceneRenderingID(me.PrimaryGroup, me.SecondaryGroup) <> -1 or me.Command = nc.quit or me.Rendering then		    if me.ModoSocket.IsConnected or gSimulationMode then // used to have  [or me.IsBucketMaster]		      if me.ModoSocket.ReadyForNextCommand then		        me.SendNextJob()		        		        // Make sure we set this to false since we just sent out the command and haven't gotten an ack back		        me.ModoSocket.ReadyForNextCommand = False		      end if		    end if		  elseif me.Command = nc.NoCommand then		    SendSocketCommand "||check||"		  end if		  		  // Make sure we update the status of the node		  QueueWindow.UpdateNodeInList(me.Name)		  		  // These lines are for simulation mode only!!!		  #if gSimulationMode then		    me.ModoSocket.data = "||ack||"		    me.ModoSocket.ReadyForNextCommand = True		  #endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor()		  me.HasAppPath = False		  me.ModoSocket = new Node_ModoTCPSocket		  me.ClientSocket = new Node_ClientTCPSocket		  		  previousFrame = gNoFrameToRender		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoCheckClientSocketData()		  Select Case me.ClientSocket.ReceivedData		  Case "HasModoPath"		    me.HasAppPath = True		  Case "NoModoPath"		    me.HasAppPath = False		  Case "HasLicensePath"		    me.HasLicensePath = True		  Case "NoLicensePath"		    me.HasLicensePath = False		  Case "AckHeadlessCmd"		    me.ModoSocket.ReadyForNextCommand = True		  End Select		  		  me.ClientSocket.ReceivedData = ""		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function IsNodeFrameOverdue() As Boolean		  Dim sceneIndex, frameIndex As Integer		  		  // If there's no scene or frame to render then we can't really say it's on		  if me.CurrentSceneID = 0 or me.frameToRender = gNoFrameToRender then		    Return True		  end if		  		  if TheFarm.GetSceneIndexByID(me.CurrentSceneID) <> -1 then		    sceneIndex = TheFarm.GetSceneIndexByID(me.CurrentSceneID)		    frameIndex = TheFarm.Scenes(sceneIndex).ConvertFrameToIndex(me.frameToRender)		    		    if TheFarm.Scenes(sceneIndex).IsFrameOverdue(frameIndex) then		      Return True		    end if		  end if		  		  Return False		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub LaunchWithLicense()		  me.ClientSocket.SendMessage(1, "LicenseLaunch")		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub MarkOldFrameAsCompleted()		  // Make sure it isn't the current frame rendering		  if previousFrame <> frameToRender or SceneForPreviousFrame <> CurrentSceneID then		    TheFarm.MarkSceneFrameAsCompleted(SceneForPreviousFrame, previousFrame)		    previousFrame = frameToRender		    SceneForPreviousFrame = me.CurrentSceneID		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Reset()		  if TheFarm.GetSceneIndexByID(me.CurrentSceneID) <> -1 then		    if me.IsBucketMaster then		      TheFarm.Scenes(TheFarm.GetSceneIndexByID(me.CurrentSceneID)).BucketMasterDistributed = False		    end if		  end if		  		  me.HasAppPath = false		  me.frameToRender = gNoFrameToRender		  me.Rendering = False		  me.Command = nc.noCommand		  me.CurrentSceneID = 0		  me.IsBucketComputer = False		  me.IsBucketMaster = False		  		  WriteToLog " ---------   NODE RESET -----------", LogFuncs.General		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SendNextJob()		  Dim outString As String		  Dim CurrentScenePath As String		  Dim CurrentSceneIndex As Int32		  Dim uvIndex As Int32		  		  //outString = "pref.value render.netPath " +  chr(34) + "/Volumes/Main_Content/z_Temp" + chr(34)		  //MsgBox outString		  		  // This is for a GOTO statement		  start:		  		  WriteToLog "------------ Cmd", LogFuncs.Command		  		  		  // If this machine is the bucket master, then go to that portion		  if me.IsBucketMaster then		    GOTO BucketMasterStart		  end if		  		  		  // If the last command received was "||init||" then we need to make sure we reset this node so it will load the scene		  if me.ModoSocket.data = "||init||" then		    me.ModoSocket.data = ""		    		    me.Reset()		    WriteToLog "Reset Node: SendNextJob", LogFuncs.Command		    		    me.ModoSocket.ReadyForNextCommand = True		  end if		  		  		  // Check to see if we have a scene loaded or not...		  //     If we don't then load one		  if NOT me.Rendering then		    if TheFarm.GetSceneRenderingID(me.PrimaryGroup, me.SecondaryGroup) <> -1 then		      if me.CurrentSceneID <> TheFarm.GetSceneRenderingID(me.PrimaryGroup, me.SecondaryGroup) then		        if me.CurrentSceneID <> 0 then		          // If we can send the launch command, make sure we reset this nodes rendering status		          me.ClientSocket.SendMessage(1, "relaunch")		          me.Reset()		          WriteToLog "Reset Node: DoNodeLaunch", LogFuncs.General		          return		        else		          		          // This line will check to see if there's already a scene loaded on this node...		          if me.CurrentSceneID <> 0 then		            frameToRender = gNoFrameToRender		            previousFrame = gNoFrameToRender		            me.ModoSocket.NextLaunchAttempt = 0		          end if		          		          // Here we get the next scene		          me.CurrentSceneID = TheFarm.GetSceneRenderingID(me.PrimaryGroup, me.SecondaryGroup)		          CurrentSceneIndex = TheFarm.GetSceneIndexByID(CurrentSceneID)		          		          // Check for render properties such as bake		          if TheFarm.Scenes(CurrentSceneIndex).Bake then		            renderType = "!bake "		          else		            renderType = "!render.animation "		          end if		          		          // Here we make sure that we are in a fresh scene		          me.Command = nc.close		        end if		      end if		    end if		  end if		  		  CurrentSceneIndex = TheFarm.GetSceneIndexByID(CurrentSceneID)		  		  		  // If there isn't a scene, we need to get out of here		  if CurrentSceneIndex = -1 then		    return		  end if		  		  		  // Check for bucket renderness		  if TheFarm.Scenes(CurrentSceneIndex).BucketRender then		    me.IsBucketComputer = True		    		    // if the master computer hasn't been set yet, then		    if Not TheFarm.Scenes(CurrentSceneIndex).BucketMasterDistributed then		      // Make this computer the Bucket Master		      TheFarm.Scenes(CurrentSceneIndex).BucketMasterDistributed = True		      me.IsBucketMaster = True		      		      WriteToLog "Bucket Master Launch!", LogFuncs.Command		      		      IsSharedFolderSet = False		      //LaunchWithLicense()		      //return		    else		      // Otherwise, make this computer a render slave		      me.Command = nc.setAsSlave		    end if		  else		    me.IsBucketComputer = False		  end if		  		  		  BucketMasterStart:		  		  // Check the commands to delegate to the render node		  Select Case me.Command		  Case nc.noCommand		    WriteToLog "No Command...", LogFuncs.Command		    		  Case nc.loadScene		    WriteToLog "Scene loaded...", LogFuncs.Command		    		    CurrentScenePath = TheFarm.GetScenePathByID(me.CurrentSceneID)		    		    if me.Platform = gTargetMacOS then		      outString = "/Volumes/" + CurrentScenePath.ReplaceAll(":", "/")		      		      //CurrentScenePath = ConvertToShellPath(CurrentScenePath)		      		      outString = "!scene.open {" + outString + "}"		      		      WriteToLog outString, LogFuncs.Command		    elseif me.Platform = gTargetWin32 then		      outString = "!scene.open {" + CurrentScenePath + "}"		    end if		    		    SendSocketCommand outString		    		    // We want to wait after the scene loaded for a few seconds		    me.Command = nc.setGeometryCache		    		  Case nc.setGeometryCache		    outString = "pref.value render.cacheSize " + Str(gGeometryCacheSize) + "000000"		    		    SendSocketCommand outString		    		    // We want to wait after the scene loaded for a few seconds		    me.Command = nc.selectRenderItem		    		  Case nc.wait		    // Wait for 5 seconds		    WaitTime = Ticks() + 300		    		    // Get the frame we're going to render		    me.Command = nc.selectVMAP		    		  Case nc.selectRenderItem // Have Modo select the render item so we can set the first and last frame		    If TheFarm.GetSceneRenderingID(me.PrimaryGroup, me.SecondaryGroup) <> me.CurrentSceneID then		      // Do we have the highest priority scene for this render group?		      me.CurrentSceneID = 0		      me.Rendering = False		      me.Command = nc.noCommand		      GOTO start		    end if		    		    // Get the next frame to render		    frameToRender = TheFarm.GetNextRenderFrame(me.CurrentSceneID)		    		    WriteToLog "Render item selected... ", LogFuncs.Command		    		    if frameToRender <> gNoFrameToRender then		      me.Rendering = True		    else		      me.Rendering = False		      me.Command = nc.noCommand		      		      WriteToLog "Rendering - False", LogFuncs.Command		    end if		    		    outString = "!select.itemType polyRender"		    SendSocketCommand outString		    		    // Check for whether we're trying to save a layered image format		    if me.Rendering then		      // Or just keep going		      me.Command = nc.setLastFrame		    end if		    		    // Set the last frame		  Case nc.setLastFrame		    WriteToLog "Last frame set to " + Str(me.frameToRender), LogFuncs.Command		    		    outString = "!item.channel last "+ Str(me.frameToRender)		    SendSocketCommand outString		    me.Command = nc.setFirstFrame		    		    // Set the first frame		  Case nc.setFirstFrame		    WriteToLog "First frame set to " + Str(me.frameToRender), LogFuncs.Command		    		    outString = "!item.channel first "+ Str(me.frameToRender)		    SendSocketCommand outString		    		    if me.IsBucketComputer then		      if IsSharedFolderSet then		        me.Command = nc.setNetworkRender		      else		        me.Command = nc.setSharedFolder		      end if		    else		      if TheFarm.Scenes(CurrentSceneIndex).Bake then		        me.Command = nc.wait		      else		        me.Command = nc.render		      end if		    end if		    		    // Set the Shared Folder		  Case nc.setSharedFolder		    WriteToLog "Set Shared Folder...", LogFuncs.Command		    		    outString = "pref.value render.netPath " + chr(34) + gSharedFolder + chr(34)		    SendSocketCommand outString		    		    me.Command = nc.setNetworkRender		    		    IsSharedFolderSet = True		    		  Case nc.setNetworkRender		    WriteToLog "Set Net Rendering to True...", LogFuncs.Command		    		    outString = "pref.value render.useNetwork 1"		    SendSocketCommand outString		    		    me.Command = nc.render		    		    // Select the UV Map to render		  Case nc.selectVMAP		    uvIndex = TheFarm.Scenes(CurrentSceneIndex).VMAPIndex		    		    outString = "select.vertexMap " + TheFarm.Scenes(CurrentSceneIndex).VMAP(uvIndex) + " txuv replace"		    		    SendSocketCommand outString		    		    me.Command = nc.setBakeBorder		    		  Case nc.setBakeBorder		    SendSocketCommand "!pref.value render.bakeBorder " + Str(gBakeBorderSize)		    		    me.Command = nc.render		    		    // Render		  Case nc.render		    WriteToLog "Frame Rendering...", LogFuncs.Command		    		    // We don't want the node relaunching in the "CheckData" method, so, set this to true		    me.Rendering = True		    		    // If we're doing a surface bake render		    if TheFarm.Scenes(CurrentSceneIndex).Bake then		      outString = renderType		      		      Select Case TheFarm.Scenes(CurrentSceneIndex).RenderType		      Case FarmScene.rnLayeredPSD		        outString = outString + "filename:" + TheFarm.Scenes(CurrentSceneIndex).ManualOuputPath + ".psd format:PSD"		      Case FarmScene.rnLayeredEXR		        outString = outString + "filename:" + TheFarm.Scenes(CurrentSceneIndex).ManualOuputPath + ".exr format:openexrlayers"		      Case FarmScene.rnLayeredPNGs		        outString = outString + "filename:" + TheFarm.Scenes(CurrentSceneIndex).ManualOuputPath + ".png format:PNGs"		      Case FarmScene.rnTGA		        outString = outString + "filename:" + TheFarm.Scenes(CurrentSceneIndex).ManualOuputPath + ".tga format:TGA"		      Case FarmScene.rnPNG		        outString = outString + "filename:" + TheFarm.Scenes(CurrentSceneIndex).ManualOuputPath + ".png format:PNG"		      Case FarmScene.rnTGA		        outString = outString + "filename:" + TheFarm.Scenes(CurrentSceneIndex).ManualOuputPath + ".jpg format:JPG"		      Case FarmScene.rnEXR		        outString = outString + "filename:" + TheFarm.Scenes(CurrentSceneIndex).ManualOuputPath + ".exr format:EXR"		      End Select		      		    else // Otherwise let's render regular		      outString = renderType		      		      Select Case TheFarm.Scenes(CurrentSceneIndex).RenderType		      Case FarmScene.rnLayeredPSD		        outString = outString + "filename:" + TheFarm.Scenes(CurrentSceneIndex).ManualOuputPath + " format:PSD"		      Case FarmScene.rnLayeredEXR		        outString = outString + "filename:" + TheFarm.Scenes(CurrentSceneIndex).ManualOuputPath + " format:openexrlayers"		      Case FarmScene.rnLayeredPNGs		        outString = outString + "filename:" + TheFarm.Scenes(CurrentSceneIndex).ManualOuputPath + " format:PNGs"		      Else // Otherwise we're using modo's default internal settings		        // Do we have a manual path		        if TheFarm.Scenes(CurrentSceneIndex).ManualOuputPath <> "" then		          outString = outString + "filename:" + TheFarm.Scenes(CurrentSceneIndex).ManualOuputPath + " format:*"		        else		          // Otherwise go with the default filepath too		          outString = outString + "filename:* format:*"		        end if		      End Select		    end if		    		    // Do we want to display the progress?		    if gShowProgress then		      outString = outString + " options:1"		    else		      outString = outString + " options:2"		    end if		    		    SceneForPreviousFrame = CurrentSceneID		    previousFrame = frameToRender		    		    SendSocketCommand outString		    		    me.Command = nc.frameCompleted		    		    gClipboard.SetText outString		    		  Case nc.frameCompleted		    TheFarm.MarkSceneFrameAsCompleted(SceneForPreviousFrame, previousFrame)		    		    outString = "!select.itemType polyRender"		    SendSocketCommand outString		    		    me.Rendering = false		    		    me.Command = nc.selectRenderItem		    		  Case nc.setAsSlave		    WriteToLog "Set as slave...", LogFuncs.Command		    		    outString = "!render.slave"		    SendSocketCommand outString		    		  Case nc.close		    SendSocketCommand "scene.closeall"		    		    me.Command = nc.loadScene		    		  Case nc.quit		    SendSocketCommand "!!app.quit"		    me.Rendering = False		    me.Command = nc.noCommand		  End Select		  		  return		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SendSocketCommand(data As String)		  // This is for the standard Python based commands		  //if NOT me.IsBucketMaster then		  		  if me.ModoSocket.IsConnected then		    me.ModoSocket.Write data		    WriteToLog "Wrote: " + data, LogFuncs.Command		  else		    #if NOT gSimulationMode		      WriteToLog "Socket Disconnected", LogFuncs.Netwk		    #endif		  end if		  		  //else		  // This is for the Headless way of doing things with bucket rendering		  //WriteToLog "Sent: " + data, LogFuncs.Command		  //me.ClientSocket.SendMessage(Integer(TCP.HeadlessCmd), data)		  //end if		End Sub	#tag EndMethod	#tag Property, Flags = &h0		AckFile As FolderItem	#tag EndProperty	#tag Property, Flags = &h0		ClientSocket As Node_ClientTCPSocket	#tag EndProperty	#tag Property, Flags = &h0		Command As nc	#tag EndProperty	#tag Property, Flags = &h0		CurrentSceneID As Int32	#tag EndProperty	#tag Property, Flags = &h0		frameToRender As Int32	#tag EndProperty	#tag Property, Flags = &h0		HasAppPath As Boolean	#tag EndProperty	#tag Property, Flags = &h0		HasLicensePath As Boolean	#tag EndProperty	#tag Property, Flags = &h0		IsBucketComputer As Boolean	#tag EndProperty	#tag Property, Flags = &h0		IsBucketMaster As Boolean	#tag EndProperty	#tag Property, Flags = &h0		IsSharedFolderSet As Boolean	#tag EndProperty	#tag Property, Flags = &h0		LoadWaitTime As Int32	#tag EndProperty	#tag Property, Flags = &h0		ModoSocket As Node_ModoTCPSocket	#tag EndProperty	#tag Property, Flags = &h0		Name As String	#tag EndProperty	#tag Property, Flags = &h0		Platform As String	#tag EndProperty	#tag Property, Flags = &h0		previousFrame As Int32	#tag EndProperty	#tag Property, Flags = &h0		PrimaryGroup As UInt8	#tag EndProperty	#tag Property, Flags = &h0		Rendering As Boolean	#tag EndProperty	#tag Property, Flags = &h0		renderType As String	#tag EndProperty	#tag Property, Flags = &h0		SceneForPreviousFrame As Integer = 0	#tag EndProperty	#tag Property, Flags = &h0		SecondaryGroup As UInt8	#tag EndProperty	#tag Property, Flags = &h0		WaitTime As Integer	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="HasAppPath"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="HasLicensePath"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="IsBucketComputer"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="IsBucketMaster"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="IsSharedFolderSet"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Platform"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Rendering"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="renderType"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="SceneForPreviousFrame"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="WaitTime"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass