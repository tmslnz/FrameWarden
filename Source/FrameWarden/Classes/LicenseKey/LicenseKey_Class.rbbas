#tag ClassProtected Class LicenseKey_Class	#tag Method, Flags = &h0		Function CheckKey(inKey As String) As Integer		  if Len(inKey) <> 27 then		    return Integer(LicenseTypes.Free)		  end if		  		  if NOT GetKeyChunks(inKey) then		    return Integer(LicenseTypes.Free)		  end if		  		  if CheckTenKey() then		    return Integer(LicenseTypes.Ten)		  end if		  		  if CheckUnlimitedKey() then		    return Integer(LicenseTypes.Unlimited)		  end if		  		  return Integer(LicenseTypes.Free)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function CheckTenKey() As Boolean		  Dim i as integer		  		  for i = 0 to 11		    if KeyChunks(i) = 0 then		      Return False		    end if		  next		  		  if IsValidMod(KeyChunks(0), Integer(GeneratorNumbers_TenLicense.Num1)) then		    if IsValidMod(KeyChunks(1), Integer(GeneratorNumbers_TenLicense.Num2)) then		      if IsValidMod(KeyChunks(2), Integer(GeneratorNumbers_TenLicense.Num3)) then		        if IsValidMod(KeyChunks(3), Integer(GeneratorNumbers_TenLicense.Num4)) then		          if IsValidMod(KeyChunks(4), Integer(GeneratorNumbers_TenLicense.Num5)) then		            if IsValidMod(KeyChunks(5), Integer(GeneratorNumbers_TenLicense.Num6)) then		              if IsValidMod(KeyChunks(6), Integer(GeneratorNumbers_TenLicense.Num7)) then		                if IsValidMod(KeyChunks(7), Integer(GeneratorNumbers_TenLicense.Num8)) then		                  if IsValidMod(KeyChunks(8), Integer(GeneratorNumbers_TenLicense.Num9)) then		                    if IsValidMod(KeyChunks(9), Integer(GeneratorNumbers_TenLicense.Num10)) then		                      if IsValidMod(KeyChunks(10), Integer(GeneratorNumbers_TenLicense.Num11)) then		                        if IsValidMod(KeyChunks(11), Integer(GeneratorNumbers_TenLicense.Num12)) then		                          Return True		                        end if		                      end if		                    end if		                  end if		                end if		              end if		            end if		          end if		        end if		      end if		    end if		  end if		  		  return False		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function CheckUnlimitedKey() As Boolean		  Dim i as integer		  		  for i = 0 to 11		    if KeyChunks(i) = 0 then		      Return False		    end if		  next		  		  		  if IsValidMod(KeyChunks(0), Integer(GeneratorNumbers_UnlimitedLicense.Num1)) then		    if IsValidMod(KeyChunks(1), Integer(GeneratorNumbers_UnlimitedLicense.Num2)) then		      if IsValidMod(KeyChunks(2), Integer(GeneratorNumbers_UnlimitedLicense.Num3)) then		        if IsValidMod(KeyChunks(3), Integer(GeneratorNumbers_UnlimitedLicense.Num4)) then		          if IsValidMod(KeyChunks(4), Integer(GeneratorNumbers_UnlimitedLicense.Num5)) then		            if IsValidMod(KeyChunks(5), Integer(GeneratorNumbers_UnlimitedLicense.Num6)) then		              if IsValidMod(KeyChunks(6), Integer(GeneratorNumbers_UnlimitedLicense.Num7)) then		                if IsValidMod(KeyChunks(7), Integer(GeneratorNumbers_UnlimitedLicense.Num8)) then		                  if IsValidMod(KeyChunks(8), Integer(GeneratorNumbers_UnlimitedLicense.Num9)) then		                    if IsValidMod(KeyChunks(9), Integer(GeneratorNumbers_UnlimitedLicense.Num10)) then		                      if IsValidMod(KeyChunks(10), Integer(GeneratorNumbers_UnlimitedLicense.Num11)) then		                        if IsValidMod(KeyChunks(11), Integer(GeneratorNumbers_UnlimitedLicense.Num12)) then		                          Return True		                        end if		                      end if		                    end if		                  end if		                end if		              end if		            end if		          end if		        end if		      end if		    end if		  end if		  		  return False		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetHex(hexnum As Integer) As String		  Dim outStr As String		  		  outStr = "00" + Hex(hexnum)		  outStr = Right(outStr, 2)		  		  Return outStr		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetKeyChunks(refStr As String) As Boolean		  Dim hexStr As String		  Dim i As Integer		  		  for i = 0 to 11		    Select Case i		    Case 3, 6, 9		      hexStr = Left(refStr, 1)		      refStr = Right(refStr, Len(refStr)-1)		      		      if hexStr <> "-" then		        Return False		      end if		    End Select		    		    hexStr = Left(refStr, 2)		    refStr = Right(refStr, Len(refStr)-2)		    		    KeyChunks(i) = Val("&h" + hexStr)		  next		  		  Return True		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsGoodKey() As Boolean		  Dim i as Integer		  		  for i = 0 to 11		    if KeyChunks(i) = 0 then		      Return False		    end if		  next		  		  Return True		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsValidMod(value As Integer, modNum As Integer) As Boolean		  if value Mod modNum = 0 then		    return True		  end if		  		  return False		End Function	#tag EndMethod	#tag Property, Flags = &h0		Key As String	#tag EndProperty	#tag Property, Flags = &h0		KeyChunks(12) As UInt8	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Key"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass