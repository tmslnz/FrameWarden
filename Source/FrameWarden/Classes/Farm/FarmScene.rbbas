#tag ClassProtected Class FarmScene	#tag Method, Flags = &h0		Function BuildSaveFileData() As String		  Dim outString As String		  Dim i as integer		  		  // Get the scene file path		  outString = me.File.AbsolutePath + Chr(13)		  		  		  // Output the status		  if me.Status = snRendering then		    outString = outString + Str(snQueued) + Chr(13)		  else		    outString = outString + Str(me.Status) + Chr(13)		  end if		  		  		  // Save info for baking and for Layered output		  outString = outString + me.ManualOuputPath + Chr(13)		  outString = outString + Str(me.RenderType) + Chr(13)		  		  if me.VMAP.Ubound > 0 then		    outString = outString + Str(me.VMAP(me.VMAPIndex)) + Chr(13)		  else		    outString = outString + Chr(13)		  end if		  		  		  // Are we baking or not		  if me.Bake then		    outString = outString + "1" + Chr(13)		  else		    outString = outString + "0" + Chr(13)		  end if		  		  		  // Check for frames box		  if me.CheckForFrames then		    outString = outString + "1" + Chr(13)		  else		    outString = outString + "0" + Chr(13)		  end if		  		  		  // Write the Bucket Render Prefs		  if BucketRender then		    outString = outString + "1" + Chr(13)		  else		    outString = outString + "0" + Chr(13)		  end if		  		  outString = outString + Str(BucketRenderMaxComputers) + Chr(13)		  		  		  // The frame check time		  outString = outString + Str(MaxFrameTime) + Chr(13)		  		  // Write out Group 1 and 2		  outString = outString + Str(Group_Primary) + Chr(13)		  outString = outString + Str(Group_Secondary) + Chr(13)		  		  // Write the first, last and frame step number		  outString = outString + Str(FirstFrame) + Chr(13)		  outString = outString + Str(LastFrame) + Chr(13)		  outString = outString + Str(FrameStep) + Chr(13)		  		  		  // Write the "Completed" status for each frame		  for i = 0 to me.Frame.Ubound		    if me.Frame(i).Completed then		      outString = outString + "1" + chr(13)		      		      // Write out the timeStart and timeEnd		      outString = outString + Str(me.Frame(i).TimeStart) + Chr(13)		      outString = outString + Str(me.Frame(i).TimeEnd) + Chr(13)		    else		      outString = outString + "0" + chr(13)		    end if		  next		  		  WriteToLog outString, LogFuncs.LogFileSave		  		  return outString		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function CheckForOverdueFrames() As Boolean		  Dim i as integer		  		  // If the MaxFrameTime is set to 0 we don't want to check this at all because it means infinite		  if me.MaxFrameTime <> 0 then		    // Make sure we have frames		    if me.Frame.Ubound <> -1 then		      // Go through each		      for i = 0 to me.GetFrameLastIndex()		        // If the frame hasn't completed		        if NOT me.Frame(i).Completed then		          // if it WAS distributed		          if me.Frame(i).Distributed then		            // if the frame has been rendering longer than the max time it's allowed		            if IsFrameOverdue(i) then		              me.CurrentFrame = me.ConvertIndexToFrame(i)		              Return True		            end if		          end if		        end if		      next		    end if		  end if		  		  Return False		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function CheckForRenderedFrames() As Boolean		  Dim filePath, fileExt, numStr, fullPath As String		  Dim file As FolderItem		  Dim i, frameNum As Int32		  		  // Make sure we have the right file extension		  SetFramesExtension()		  fileExt = me.FramesExtension		  		  // Make the filePath the ManualOuputPath		  if me.ManualOuputPath <> "" then		    filePath = me.ManualOuputPath		  else		    filePath = me.FramesPath		  end if		  		  if filePath <> "" then		    for i = 0 to me.GetFrameLastIndex()		      frameNum = me.ConvertIndexToFrame(i)		      		      if NOT me.Frame(i).Completed then		        // if we're baking the scene we don't want a number tagged on		        if me.Bake = false then		          numStr = "0000" + Str(frameNum)		          		          if Len(Str(frameNum)) <= 4 then		            numStr = Right(numStr, 4)		          else		            numStr = Right(numStr, Len(Str(frameNum)))		          end if		          		          fullPath = filePath + numStr + fileExt		          		        else		          fullPath = filePath + fileExt		          		        end if		        		        #if TargetMacOS		          file = GetFolderItem(fullPath, FolderItem.PathTypeShell)		        #else		          file = GetFolderItem(fullPath)		        #endif		        		        		        if file <> nil then // If there's a path to the file		          if Not file.Exists then // If the frame file doesn't exist		            //me.Frame(i).Distributed = False		            me.Frame(i).Completed = False		          else		            me.Frame(i).Distributed = True		            me.Frame(i).Completed = True		          end if		        else		          //me.Frame(i).Distributed = False		          me.Frame(i).Completed = False		        end if		      else		        me.Frame(i).Distributed = True		      end if		    next		    		    Return True		  else		    		    Return False		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ConvertFrameToIndex(frameNum As Int32) As Integer		  return ((frameNum - me.FirstFrame) / me.FrameStep)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ConvertIndexToFrame(frameIndex As Integer) As Integer		  return (frameIndex * me.FrameStep) + me.FirstFrame		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetFrameCount() As Int32		  return (me.LastFrame - me.FirstFrame) / me.FrameStep + 1		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetFrameLastIndex() As Integer		  Return me.GetFrameCount() - 1		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetNextFrame() As Int32		  Dim i As Int32		  		  If me.IsDone then		    Return gNoFrameToRender		  End if		  		  me.CurrentFrame = gNoFrameToRender		  		  if me.Frame.Ubound <> -1 then		    for i = 0 to me.GetFrameLastIndex()		      if Frame(i).Distributed = False then		        Frame(i).Distributed = True		        Frame(i).TimeStart = Ticks()		        		        me.CurrentFrame = me.ConvertIndexToFrame(i)		        		        Return me.CurrentFrame		      end if		    next		  end if		  		  return me.CurrentFrame		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub InitFramesStatus()		  Dim i as Integer		  		  Redim Frame(GetFrameLastIndex())		  		  for i = 0 to me.GetFrameLastIndex()		    me.Frame(i) = New SceneFrame		    		    me.Frame(i).Distributed = False		    me.Frame(i).Completed = False		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function IsDone() As Boolean		  Dim i as integer		  		  // Let's mark all frames as incomplete and recheck them		  if CheckForFrames then		    for i = 0 to me.GetFrameLastIndex()		      me.Frame(i).Completed = False		    next		    		    if CheckForRenderedFrames() then		    end if		  end if		  		  		  if me.Frame.Ubound <> -1 then		    for i = 0 to me.GetFrameLastIndex()		      // If any frame is not completed then the scene can't be done		      if NOT Frame(i).Completed then		        Return False		      end if		    next		  end if		  		  me.Status = snDone		  Return True		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsFrameOverdue(frameIndex As Integer) As Boolean		  // In case this is a Bucket rendering, set this to false		  me.BucketMasterDistributed = False		  		  if me.Frame(frameIndex).TimeStart + me.MaxFrameTime*3600 < Ticks() then		    // Undistribute the Frame		    me.Frame(frameIndex).Distributed = False		    WriteToLog "Frame #" + Str(me.ConvertIndexToFrame(frameIndex)) + " is overdue!", LogFuncs.General		    Return True		  end if		  		  Return False		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub MarkFrameAsCompleted(frameIndex As Integer)		  Dim index as Integer		  		  index = ConvertFrameToIndex(frameIndex)		  		  if index > -1 then		    if index <= me.Frame.Ubound then		      me.Frame(index).Completed = True		      me.Frame(index).Distributed = True		      me.Frame(index).TimeEnd = Ticks()		    end if		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RestartScene()		  Dim i as Integer		  		  me.Status = snQueued		  		  for i = 0 to me.GetFrameLastIndex()		    me.Frame(i).Distributed = False		    me.Frame(i).Completed = False		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Running() As Boolean		  // If there is a scene currently running this will return true		  if me.CurrentFrame <> gNoFrameToRender then		    if me.Status = snQueued or me.Status = snRendering then		      if me.FrameStep > 0 then		        if me.CurrentFrame <= me.LastFrame then		          return True		        end if		      end if		      		      if me.FrameStep < 0 then		        if me.CurrentFrame >= me.LastFrame then		          // This is in case the scene is rendering backward with a negative framestep		          return True		        end if		      end if		      		      if me.CheckForOverdueFrames() then		        Return True		      end if		    end if		  end if		  		  Return False		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub SetFramesExtension()		  		  Select Case me.RenderType		  Case me.rnLayeredPNGs		    me.FramesExtension = ".png"		  Case me.rnLayeredPSD		    me.FramesExtension = ".psd"		  Case me.rnLayeredEXR		    me.FramesExtension = ".exr"		  Case me.rnTGA		    me.FramesExtension = ".tga"		  Case FarmScene.rnPNG		    me.FramesExtension = ".png"		  Case FarmScene.rnJPG		    me.FramesExtension = ".jpg"		  Case FarmScene.rnEXR		    me.FramesExtension = ".exr"		  End Select		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetScene(theScene As FolderItem)		  me.file = theScene		  me.CurrentFrame = me.FirstFrame		  me.InitFramesStatus()		End Sub	#tag EndMethod	#tag Property, Flags = &h0		Bake As Boolean	#tag EndProperty	#tag Property, Flags = &h0		BucketMasterDistributed As Boolean	#tag EndProperty	#tag Property, Flags = &h0		BucketRender As Boolean	#tag EndProperty	#tag Property, Flags = &h0		BucketRenderCompCount As Integer	#tag EndProperty	#tag Property, Flags = &h0		BucketRenderMaxComputers As Integer	#tag EndProperty	#tag Property, Flags = &h0		CheckForFrames As Boolean	#tag EndProperty	#tag Property, Flags = &h0		CurrentFrame As Int32	#tag EndProperty	#tag Property, Flags = &h0		File As FolderItem	#tag EndProperty	#tag Property, Flags = &h0		FirstFrame As Int32	#tag EndProperty	#tag Property, Flags = &h0		Frame(-1) As SceneFrame	#tag EndProperty	#tag Property, Flags = &h0		FrameCount As Int32	#tag EndProperty	#tag Property, Flags = &h0		FramesExtension As String	#tag EndProperty	#tag Property, Flags = &h0		FramesPath As String	#tag EndProperty	#tag Property, Flags = &h0		FrameStep As Int32	#tag EndProperty	#tag Property, Flags = &h0		Group_Primary As UInt8	#tag EndProperty	#tag Property, Flags = &h0		Group_Secondary As UInt8	#tag EndProperty	#tag Property, Flags = &h0		ID As Int32	#tag EndProperty	#tag Property, Flags = &h0		LastFrame As Int32	#tag EndProperty	#tag Property, Flags = &h0		ManualOuputPath As String	#tag EndProperty	#tag Property, Flags = &h0		MaxFrameTime As Integer	#tag EndProperty	#tag Property, Flags = &h0		RenderType As Integer = 0	#tag EndProperty	#tag Property, Flags = &h0		Status As Int32	#tag EndProperty	#tag Property, Flags = &h0		VMAP(-1) As String	#tag EndProperty	#tag Property, Flags = &h0		VMAPIndex As Integer = -1	#tag EndProperty	#tag Constant, Name = rnDefault, Type = Double, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = rnEXR, Type = Double, Dynamic = False, Default = \"7", Scope = Public	#tag EndConstant	#tag Constant, Name = rnJPG, Type = Double, Dynamic = False, Default = \"6", Scope = Public	#tag EndConstant	#tag Constant, Name = rnLayeredEXR, Type = Double, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = rnLayeredPNGs, Type = Double, Dynamic = False, Default = \"3", Scope = Public	#tag EndConstant	#tag Constant, Name = rnLayeredPSD, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = rnPNG, Type = Double, Dynamic = False, Default = \"5", Scope = Public	#tag EndConstant	#tag Constant, Name = rnTGA, Type = Double, Dynamic = False, Default = \"4", Scope = Public	#tag EndConstant	#tag Constant, Name = rnVMAP, Type = Double, Dynamic = False, Default = \"4", Scope = Public	#tag EndConstant	#tag Constant, Name = snDone, Type = Double, Dynamic = False, Default = \"3", Scope = Public	#tag EndConstant	#tag Constant, Name = snQueued, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = snRendering, Type = Double, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = snStopped, Type = Double, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Bake"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="BucketMasterDistributed"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="BucketRender"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="BucketRenderCompCount"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="BucketRenderMaxComputers"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="CheckForFrames"			Group="Behavior"			InitialValue="0"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="FramesExtension"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="FramesPath"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="ManualOuputPath"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="MaxFrameTime"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="RenderType"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="VMAPIndex"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass