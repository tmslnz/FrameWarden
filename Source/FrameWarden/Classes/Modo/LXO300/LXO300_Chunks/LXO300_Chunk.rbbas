#tag ClassProtected Class LXO300_Chunk	#tag Method, Flags = &h0		Function GetChunkType() As String		  // This returns the main chunk type of an instance of this class		  		  Dim typeStr As String		  		  typeStr = Chr(ChunkType.Byte(0)) + Chr(ChunkType.Byte(1)) + Chr(ChunkType.Byte(2)) + Chr(ChunkType.Byte(3))		  		  Return typeStr		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetItemName() As String		  // If the data type of this chunk is an ITEM then this function returns the name of the item (IE. MyReallyCoolBox)		  		  Dim itemName As String		  		  if me.ChunkType = "ITEM" then		    itemName = me.GetItemType()		    itemName = ReadString		    		    return itemName		  end if		  		  return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetItemType() As String		  // If the data type of this chunk is an ITEM then this function returns the type of the item (IE. mesh or camera)		  Dim typeString As String		  		  dataMarker = 0		  		  if me.GetChunkType = "ITEM" then		    typeString = ReadString		    		    return typeString		  end if		  		  return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetNextChunkType() As String		  // This returns the next sub chunk type based on the marker's current position		  		  Dim i As Int32		  		  i = dataMarker		  dataMarker = i + 4		  		  return Chr(Data.Byte(i)) + Chr(Data.Byte(i + 1)) + Chr(Data.Byte(i + 2)) + Chr(Data.Byte(i + 3))		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetRefID() As Int32		  Dim junkStr As String		  		  if me.ChunkType = "ITEM" then		    junkStr = me.GetItemType + me.GetItemName		    		    return ReadLong		  end if		  		  return gNoFrameToRender		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetRenderExtension() As String		  Dim junkStr, renderExt As String		  Dim junkInt, length, i as Int32		  		  if me.GetChunkType = "ITEM" then		    me.dataMarker = 0		    		    junkStr = me.ReadString		    junkStr = me.ReadString		    		    junkInt = me.ReadLong		    		    While me.dataMarker < me.Size		      // Read in each chunk		      if me.GetNextChunkType = "CHNS" then		        length = me.ReadUShort		        		        junkStr = me.ReadString		        renderExt = me.ReadString		        		        if junkStr = "format" then		          		          Select Case renderExt		            		          Case "$FLEX"		            Return ".flx"		            		          Case "$Targa", "TGA"		            Return ".tga"		            		          Case "BMP"		            Return ".bmp"		            		          Case "GIF"		            Return ".gif"		            		          Case "HDR"		            Return ".hdr"		            		          Case "JPG"		            Return ".jpg"		            		          Case "PNG"		            Return ".png"		            		          Case "SGI"		            Return ".sgi"		            		          Case "TIF", "TIF16", "TIF16BIG"		            Return ".tif"		            		          Case "XPM"		            Return ".xpm"		            		          Case "openexr"		            Return ".exr"		            		          Case ""		            Return ""		            		          Else		            Return renderExt		          End Select		          		        else		          renderExt = ""		        end if		        		      else		        dataMarker = dataMarker + me.ReadUShort		      end if		    Wend		  end if		  		  return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetRenderPath() As String		  Dim junkStr, renderPath As String		  Dim junkInt, length, i as Int32		  		  if me.GetChunkType = "ITEM" then		    me.dataMarker = 0		    		    junkStr = me.ReadString		    		    if junkStr = "renderOutput" then		      junkStr = me.ReadString		      junkInt = me.ReadLong		      		      While me.dataMarker < me.Size		        // Read in each chunk		        if me.GetNextChunkType = "CHNS" then		          length = me.ReadUShort		          		          junkStr = me.ReadString		          renderPath = me.ReadString		          		          if junkStr = "filename" then		            if renderPath <> "" then		              Return renderPath		            end if		          end if		          		        else		          dataMarker = dataMarker + me.ReadUShort		        end if		      Wend		    end if		  end if		  		  return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetVMAPName() As String		  Dim tempStr As String		  		  tempStr = GetVMAPType		  		  tempStr = Str(ReadUShort)		  		  return ReadString()		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetVMAPType() As String		  dataMarker = 0		  		  Return me.ReadID4		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsMesh() As Boolean		  // If this chunk is an ITEM it will determine whether or not this chunk is a mesh		  		  if me.GetChunkType = "ITEM" then		    if Chr(Data.Byte(0)) + Chr(Data.Byte(1)) + Chr(Data.Byte(2)) + Chr(Data.Byte(3)) = "mesh" then		      return true		    end if		  end if		  		  return false		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Key_Count() As Int32		  // This function counts the number of keyframes in an ENVL chunk		  		  Dim i as Int32		  Dim keyCount As Int32		  		  if me.GetChunkType = "ENVL" then		    for i = 1 to me.Size - 3		      if Chr(Data.Byte(i)) = "K" then		        if Chr(Data.Byte(i+1)) = "E" then		          if Chr(Data.Byte(i+2)) = "Y" then		            if Chr(Data.Byte(i+3)) = " " then		              keyCount = keyCount + 1		              i = i + 3		            end if		          end if		        end if		      end if		    next		  end if		  		  return keyCount		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ReadByte() As Int8		  Dim i as Int8		  		  i = me.Data.Byte(dataMarker)		  		  dataMarker = dataMarker + 1		  		  return i		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ReadDouble() As Double		  Dim d As Double		  		  d = Data.DoubleValue(dataMarker)		  dataMarker = dataMarker + 8		  		  return d		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ReadFloat() As Double		  Dim d As Double		  		  d = Data.SingleValue(dataMarker)		  dataMarker = dataMarker + 4		  		  return d		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ReadID4() As String		  return Chr(me.ReadByte()) + Chr(me.ReadByte()) + Chr(me.ReadByte()) + Chr(me.ReadByte())		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ReadInChunk(Byref inFile As BinaryStream)		  Dim i as Int32		  		  me.ChunkType = NewMemoryBlock(4)		  		  // Make sure the Type block is or isn't LittleEndian		  if TargetLittleEndian then		    me.ChunkType.LittleEndian = False		  end if		  		  me.ChunkType.Long(0) = inFile.ReadLong		  		  me.Size = inFile.ReadLong		  		  me.Data = NewMemoryBlock(Size)		  		  // Make sure the Data block is or isn't LittleEndian		  if TargetLittleEndian then		    me.Data.LittleEndian = False		  end if		  		  // Check to see if it's an ITEM chunk, if it isn't it needs to be skipped		  if me.ChunkType = "ITEM" then		    for i = 1 to Size		      me.Data.Byte(i-1) = inFile.ReadByte		      		      if i = 1 then		        // if the first character isn't an "r" then it can't be a render output and needs to be skipped		        if Data.Byte(0) <> asc("r") then		          inFile.Position = inFile.Position + Size - 1		          exit		        end if		      end if		    next		  elseif me.ChunkType = "VMAP" then		    for i = 1 to Size		      Data.Byte(i-1) = inFile.ReadByte		    next		  else		    inFile.Position = inFile.Position + me.Size		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ReadLong() As Int32		  Dim i as Int32		  		  i = Data.Long(dataMarker)		  		  dataMarker = dataMarker + 4		  		  return i		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ReadSingle() As Single		  Dim s As Single		  		  s = Data.SingleValue(dataMarker)		  dataMarker = dataMarker + 4		  		  return s		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ReadString() As String		  Dim returnString As String		  		  while me.Data.Byte(dataMarker) <> 0		    returnString = returnString + Chr(me.Data.Byte(dataMarker))		    dataMarker = dataMarker + 1		  wend		  		  UnpadStringMarkerZeros()		  		  return returnString		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ReadUShort() As UInt16		  Dim i as UInt16		  		  i = Data.UShort(dataMarker)		  		  dataMarker = dataMarker + 2		  		  return i		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub UnpadStringMarkerZeros()		  // Strings are padded based on whether or not they are on an even bit or not.		  // Increment the data marker 1 or 2 more time so we don't leave off on the ZERO terminator		  if (dataMarker mod 2) = 1 then		    dataMarker = dataMarker + 1		  else		    dataMarker = dataMarker + 2		  end if		End Sub	#tag EndMethod	#tag Property, Flags = &h0		chunkNumber As Integer	#tag EndProperty	#tag Property, Flags = &h0		ChunkType As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h0		Data As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h0		dataMarker As Int32	#tag EndProperty	#tag Property, Flags = &h0		Size As Int32	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="chunkNumber"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass