#tag ClassProtected Class LXO300_Data	#tag Method, Flags = &h0		Function GetFirstFrame() As Integer		  return 0		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetLastFrame() As Integer		  return 120		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetRenderExtension() As String		  Dim i As Integer		  Dim extension As String		  		  for i = 0 to ITEM.Ubound		    extension = ITEM(i).GetRenderExtension()		    		    if extension <> "" then		      Return extension		    end if		  next		  		  return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetRenderPath() As String		  Dim i As Integer		  Dim path As String		  		  for i = 0 to ITEM.Ubound		    path = ITEM(i).GetRenderPath()		    		    if path <> "" then		      Return path		    end if		  next		  		  return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function Open() As Boolean		  Dim f as folderItem		  		  f = GetOpenFolderItem("modo")		  		  if f <> nil then		    me.Read(f)		    return true		  end if		  		  return false		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Read(f As folderItem)		  Dim checkString As String		  Dim chunkType As String		  Dim i, inByte, chunkNumber as Int32		  		  if f <> nil then		    if f.Exists then		      LXO_File = f		      		      binFile = LXO_File.OpenAsBinaryFile		      		      LXO_Data = NewMemoryBlock(12) // This is the size in bytes of the header		      		      LXO_Data.Long(binFile.position) = binFile.ReadLong // Read "FORM"		      fileSize = binFile.ReadLong // Read Data Size (starting immediately after this LONG is read)		      LXO_Data.Long(binFile.position) = fileSize		      		      // We want to make sure this is an LXO file		      checkString = Chr(binFile.ReadByte) + Chr(binFile.ReadByte) + Chr(binFile.ReadByte) + Chr(binFile.ReadByte)		      		      if checkString <> "LXOB" then		        MsgBox "This is not a proper LXO file!!!"		        return		      end if		      		      // ReadChunks		      While not binFile.EOF		        chunkType = Chr(binFile.ReadByte) + Chr(binFile.ReadByte) + Chr(binFile.ReadByte) + Chr(binFile.ReadByte)		        		        binFile.Position = binFile.Position - 4		        		        chunkNumber = chunkNumber + 1		        		        select case chunkType		        case "ITEM"		          Redim ITEM(ITEM.Ubound + 1)		          ITEM(ITEM.Ubound) = new LXO300_ITEM()		          		          ITEM(ITEM.Ubound).ReadInChunk(binFile)		          ITEM(ITEM.Ubound).UpdateData()		          		        case "ENVL" // Envelope		          Redim ENVL(ENVL.Ubound + 1)		          ENVL(ENVL.Ubound) = new LXO300_ENVL()		          		          ENVL(ENVL.Ubound).ReadInChunk(binFile)		          //ENVL(ENVL.Ubound).UpdateData()		          		        case "VMAP" // Vertex Map		          Redim VMAP(VMAP.Ubound + 1)		          VMAP(VMAP.Ubound) = new LXO300_VMAP()		          		          VMAP(VMAP.Ubound).ReadInChunk(binFile)		          VMAP(VMAP.Ubound).UpdateData()		          VMAP(VMAP.Ubound).chunkNumber = chunkNumber		          		        case else		          // Read in a generic chunk		          Redim GenericChunk(GenericChunk.Ubound + 1)		          GenericChunk(GenericChunk.Ubound) = new LXO300_Chunk()		          		          GenericChunk(GenericChunk.Ubound).ReadInChunk(binFile)		          		        end select 		        		        if UserCancelled() then		          binFile.Close		          exit		        end if		      Wend		      		      binFile.Close		    end if		  end if		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected binFile As BinaryStream	#tag EndProperty	#tag Property, Flags = &h0		ChunkCount As Int32	#tag EndProperty	#tag Property, Flags = &h0		ENVL(-1) As LXO300_ENVL	#tag EndProperty	#tag Property, Flags = &h0		fileSize As Integer	#tag EndProperty	#tag Property, Flags = &h0		GenericChunk(-1) As LXO300_Chunk	#tag EndProperty	#tag Property, Flags = &h0		ITEM(-1) As LXO300_ITEM	#tag EndProperty	#tag Property, Flags = &h0		LXO_Data As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h0		LXO_File As FolderItem	#tag EndProperty	#tag Property, Flags = &h0		LXO_FileOut As folderItem	#tag EndProperty	#tag Property, Flags = &h0		VMAP(-1) As LXO300_VMAP	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="fileSize"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass