#tag WindowBegin Window QueueWindow   BackColor       =   0   Backdrop        =   2110672694   BalloonHelp     =   ""   CloseButton     =   True   Composite       =   False   Frame           =   0   FullScreen      =   False   HasBackColor    =   False   Height          =   612   ImplicitInstance=   True   LiveResize      =   True   MacProcID       =   0   MaxHeight       =   32000   MaximizeButton  =   True   MaxWidth        =   32000   MenuBar         =   553393500   MenuBarVisible  =   True   MinHeight       =   586   MinimizeButton  =   True   MinWidth        =   758   Placement       =   0   Resizeable      =   True   Title           =   "Frame Warden - Render Farm Controller"   Visible         =   True   Width           =   758   Begin ListBox SceneList      AutoDeactivate  =   True      AutoHideScrollbars=   True      Bold            =   ""      Border          =   True      ColumnCount     =   6      ColumnsResizable=   True      ColumnWidths    =   ""      DataField       =   ""      DataSource      =   ""      DefaultRowHeight=   -1      Enabled         =   True      EnableDrag      =   False      EnableDragReorder=   ""      GridLinesHorizontal=   0      GridLinesVertical=   0      HasHeading      =   True      HeadingIndex    =   -1      Height          =   209      HelpTag         =   ""      Hierarchical    =   False      Index           =   -2147483648      InitialParent   =   ""      InitialValue    =   "Scene Name	Status	Frame Range	Scene ID	Group(s)	UV to Bake"      Italic          =   ""      Left            =   20      LockBottom      =   True      LockedInPosition=   False      LockLeft        =   True      LockRight       =   True      LockTop         =   False      RequiresSelection=   False      Scope           =   0      ScrollbarHorizontal=   ""      ScrollBarVertical=   True      SelectionType   =   0      TabIndex        =   1      TabPanelIndex   =   0      TabStop         =   True      TextFont        =   "System"      TextSize        =   0      TextUnit        =   0      Top             =   383      Underline       =   ""      UseFocusRing    =   True      Visible         =   True      Width           =   718      _ScrollOffset   =   0      _ScrollWidth    =   -1   End   Begin ListBox NodeList      AutoDeactivate  =   True      AutoHideScrollbars=   True      Bold            =   ""      Border          =   True      ColumnCount     =   6      ColumnsResizable=   True      ColumnWidths    =   ""      DataField       =   ""      DataSource      =   ""      DefaultRowHeight=   -1      Enabled         =   True      EnableDrag      =   ""      EnableDragReorder=   ""      GridLinesHorizontal=   0      GridLinesVertical=   0      HasHeading      =   True      HeadingIndex    =   -1      Height          =   329      HelpTag         =   ""      Hierarchical    =   ""      Index           =   -2147483648      InitialParent   =   ""      InitialValue    =   "Node Name	Status	IP Address	Group	Rendering Scene #	Platform"      Italic          =   ""      Left            =   20      LockBottom      =   True      LockedInPosition=   False      LockLeft        =   True      LockRight       =   True      LockTop         =   True      RequiresSelection=   ""      Scope           =   0      ScrollbarHorizontal=   ""      ScrollBarVertical=   True      SelectionType   =   0      TabIndex        =   0      TabPanelIndex   =   0      TabStop         =   True      TextFont        =   "System"      TextSize        =   0      TextUnit        =   0      Top             =   14      Underline       =   ""      UseFocusRing    =   True      Visible         =   True      Width           =   718      _ScrollOffset   =   0      _ScrollWidth    =   -1   End   Begin Timer FireUpdate      Height          =   32      Index           =   -2147483648      InitialParent   =   ""      Left            =   -51      LockedInPosition=   False      Mode            =   2      Period          =   250      Scope           =   0      TabIndex        =   2      TabPanelIndex   =   0      TabStop         =   True      Top             =   119      Width           =   32   End   Begin Timer CheckStatusTimer      Height          =   32      Index           =   -2147483648      InitialParent   =   ""      Left            =   -51      LockedInPosition=   False      Mode            =   2      Period          =   250      Scope           =   0      TabIndex        =   3      TabPanelIndex   =   0      TabStop         =   True      Top             =   163      Width           =   32   End   Begin EasyTCPSocket Server_Socket      Address         =   ""      ControlOrder    =   8      Height          =   32      Index           =   -2147483648      InitialParent   =   ""      Left            =   -51      LockedInPosition=   False      Port            =   47599      Scope           =   0      TabIndex        =   4      TabPanelIndex   =   0      TabStop         =   True      Top             =   14      Width           =   32   End   Begin Timer DisconnectTimer      Height          =   32      Index           =   -2147483648      InitialParent   =   ""      Left            =   -51      LockedInPosition=   False      Mode            =   2      Period          =   144      Scope           =   0      TabIndex        =   5      TabPanelIndex   =   0      TabStop         =   True      Top             =   208      Width           =   32   End   Begin Timer RelaunchNodeTimer      Height          =   32      Index           =   -2147483648      Left            =   -51      LockedInPosition=   False      Mode            =   2      Period          =   15000      Scope           =   0      TabIndex        =   6      TabPanelIndex   =   0      TabStop         =   True      Top             =   252      Width           =   32   End   Begin Timer LaunchAllNodesTimer      Height          =   32      Index           =   -2147483648      Left            =   -51      LockedInPosition=   False      Mode            =   0      Period          =   10000      Scope           =   0      TabIndex        =   7      TabPanelIndex   =   0      TabStop         =   True      Top             =   554      Width           =   32   End   Begin ContextualMenu NodeContextualMenu      Height          =   32      Index           =   -2147483648      InitialParent   =   ""      Left            =   10      LockedInPosition=   False      Scope           =   0      TabIndex        =   8      TabPanelIndex   =   0      TabStop         =   True      Top             =   58      UseMacCMM       =   ""      Width           =   32   End   Begin ContextualMenu SceneContextualMenu      Height          =   32      Index           =   -2147483648      InitialParent   =   ""      Left            =   10      LockedInPosition=   False      Scope           =   0      TabIndex        =   9      TabPanelIndex   =   0      TabStop         =   True      Top             =   420      UseMacCMM       =   ""      Width           =   32   End   Begin Label StaticText1      AutoDeactivate  =   True      Bold            =   ""      DataField       =   ""      DataSource      =   ""      Enabled         =   True      Height          =   16      HelpTag         =   ""      Index           =   -2147483648      InitialParent   =   ""      Italic          =   ""      Left            =   20      LockBottom      =   True      LockedInPosition=   False      LockLeft        =   ""      LockRight       =   ""      LockTop         =   ""      Multiline       =   ""      Scope           =   0      TabIndex        =   10      TabPanelIndex   =   0      TabStop         =   True      Text            =   """Drag n Drop"" or ""Right Click"" to add a scene or for other scene options..."      TextAlign       =   0      TextColor       =   0      TextFont        =   "System"      TextSize        =   0      TextUnit        =   0      Top             =   356      Underline       =   ""      Visible         =   True      Width           =   718   EndEnd#tag EndWindow#tag WindowCode	#tag Event		Function CancelClose(appQuitting as Boolean) As Boolean		  if gAgreeToLicense = True then		    if TheFarm.Scenes.Ubound > -1 then		      if MsgBox("Do you really want to quit Frame Warden?", 1) = 2 then		        return True		      end if		    end if		  else		    return False		    		  end if		  		  return False		End Function	#tag EndEvent	#tag Event		Sub Close()		  Server_Socket.SendMessage(Int32(TCP.Check), "down")		  DoShutdown		End Sub	#tag EndEvent	#tag Event		Sub EnableMenuItems()		  FileClose.Enabled = false		End Sub	#tag EndEvent	#tag Event		Function KeyDown(Key As String) As Boolean		  //MsgBox Str(Asc(Key))		End Function	#tag EndEvent	#tag Event		Sub Open()		  Dim status As Boolean		  Dim i, simPrimary, simSecondary, nullInt as UInt8		  		  gLicenseKey = new LicenseKey_Class		  		  ReadServerPrefs()		  TheFarm.LoadScenesFromFarmSaveData()		  		  UpdateLicenseInfo(gLicenseKey.Key)		  		  #if gSimulationMode then		    MsgBox "Running in Simulation Mode!!!"		    		    For i = 0 to gSimulationNodeCount-1		      //simPrimary = Rnd * 10 + 1		      //simSecondary = Rnd * 10 + 1		      simPrimary = 1		      simSecondary = simPrimary		      		      #if TargetMacOS		        nullInt = AddNewNode("SimNode" + Str(i) + "@Sim IP " + str(i+1) + "@" + Str(simPrimary) + "@" + Str(simSecondary) + "@" + gTargetMacOS)		      #else		        nullInt = AddNewNode("SimNode" + Str(i) + "@Sim IP " + str(i+1) + "@" + Str(simPrimary) + "@" + Str(simSecondary) + "@" + gTargetWin32)		      #endif		    Next		  #endif		End Sub	#tag EndEvent	#tag MenuHandler		Function FileQuit() As Boolean Handles FileQuit.Action			self.Close						Return True		End Function	#tag EndMenuHandler	#tag Method, Flags = &h0		Function AddNewNode(name As String) As Integer		  Dim index as integer		  		  if TheFarm.Nodes.Ubound < gMaxNodes-1 or gMaxNodes = -1 then		    index = TheFarm.AddNode(name)		    		    // if it returns -1 then it's a new node		    if index = -1 then		      NodeList.AddRow(TheFarm.Nodes(TheFarm.Nodes.Ubound).Name)		      UpdateNodeInList(TheFarm.Nodes(TheFarm.Nodes.Ubound).Name)		      		      if TheFarm.Nodes(TheFarm.Nodes.Ubound).ModoSocket.IsConnected then		        WriteToLog "Connected Yo!", LogFuncs.Netwk		      end if		      		      TheFarm.Nodes(TheFarm.Nodes.Ubound).ModoSocket.LastResponse = Ticks()		    end if		  else		    return -1		  End if		  		  return index		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub CheckDragItems()		  // If we have some dragitems		  if Window(0) = QueueWindow  then		    if dragItems.Ubound <> -1 then		      if (TheFarm.AddScene(dragItems(0))) then		        if TheFarm.Current_ID <> 0 then		          SceneList.ListIndex = SceneList.LastIndex		          		          UpdateSceneList()		          		          SceneSetupWindow.Show		          SceneSetupWindow.SceneIndex = SceneList.LastIndex		          		          dragItems.Remove 0		        end if		      end if		    end if		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoAddScene()		  // Make sure we added a scene before we display the scene setup dialogue		  		  if TheFarm.AddScene() then		    if TheFarm.Current_ID <> 0 then		      SceneList.ListIndex = SceneList.LastIndex		      		      UpdateSceneList()		      		      SceneSetupWindow.Show		      SceneSetupWindow.SceneIndex = SceneList.LastIndex		    end if		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoClearAllScenes()		  Dim i as Integer		  		  for i = 1 to SceneList.ListCount		    TheFarm.Scenes.Remove 0		  Next		  		  SceneList.DeleteAllRows		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoClearFinishedScenes()		  Dim i, sceneIndex, count as Integer		  		  i = 0		  count = SceneList.ListCount		  		  do		    sceneIndex = TheFarm.GetSceneIndexByID(Val(SceneList.Cell(i, 3)))		    		    if TheFarm.Scenes(sceneIndex).Status = FarmScene.snDone then		      TheFarm.Scenes.Remove sceneIndex		      SceneList.RemoveRow(i)		      count = count - 1		    else		      i = i + 1		    end if		  loop until i >= count		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoClearScene()		  if SceneList.ListIndex <> -1 then		    TheFarm.Scenes.Remove SceneList.ListIndex		    SceneList.RemoveRow(SceneList.ListIndex)		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoLaunchAllNodes()		  Dim i as integer		  		  // Go through each node and launch Modo		  if TheFarm.Nodes.Ubound <> -1 then		    For i = 0 to TheFarm.Nodes.Ubound		      DoNodeLaunch(i)		    Next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoNodeKill(nodeIndex As Integer)		  if TheFarm.Nodes(nodeIndex).ClientSocket.IsConnected then		    // If we can send the launch command, make sure we reset this nodes rendering status		    TheFarm.Nodes(nodeIndex).ClientSocket.SendMessage(1, "kill")		    TheFarm.ResetNode(nodeIndex)		    WriteToLog "Reset Node: DoNodeKill", LogFuncs.General		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoNodeLaunch(nodeIndex As Integer)		  if TheFarm.Nodes(nodeIndex).ClientSocket.IsConnected then		    // If we can send the launch command, make sure we reset this nodes rendering status		    TheFarm.Nodes(nodeIndex).ClientSocket.SendMessage(1, "launch")		    TheFarm.Nodes(nodeIndex).Reset		    WriteToLog "Reset Node: DoNodeLaunch", LogFuncs.General		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoNodeRelaunch(nodeIndex As Integer)		  if TheFarm.Nodes(nodeIndex).ClientSocket.IsConnected then		    // If we can send the launch command, make sure we reset this nodes rendering status		    TheFarm.Nodes(nodeIndex).ClientSocket.SendMessage(1, "relaunch")		    TheFarm.ResetNode(nodeIndex)		    WriteToLog "Reset Node: DoNodeRelaunch", LogFuncs.General		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoQuitAllNodes()		  Dim i as integer		  		  // Go through each node and kill Modo		  if TheFarm.Nodes.Ubound <> -1 then		    For i = 0 to TheFarm.Nodes.Ubound		      DoNodeKill(i)		    Next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoRestartScene()		  Dim i as Integer		  		  TheFarm.Scenes(SceneList.ListIndex).RestartScene()		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoSendClientModoAppPath(nodeIndex As Integer)		  TheFarm.Nodes(nodeIndex).ClientSocket.SendMessage(1, "modopath:" + gModoPath)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoSendClientModoLicensePath(nodeIndex As Integer)		  TheFarm.Nodes(nodeIndex).ClientSocket.SendMessage(1, "licensepath:" + gModoLicensePath)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoShutdown()		  WriteServerPrefs		  Quit		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoStartScene()		  if SceneList.ListIndex <> -1 then		    if TheFarm.Scenes(SceneList.ListIndex).Status <> FarmScene.snRendering then		      TheFarm.Scenes(SceneList.ListIndex).Status = FarmScene.snQueued		      SceneList.Cell(SceneList.ListIndex, 1) = "Queued"		    end if		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DoStopScene()		  if SceneList.ListIndex <> -1 then		    TheFarm.Scenes(SceneList.ListIndex).Status = FarmScene.snStopped		    SceneList.Cell(SceneList.ListIndex, 1) = "Stopped"		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub MoveSceneDown()		  Dim swapScene As FarmScene		  		  swapScene = TheFarm.Scenes(SceneList.ListIndex)		  		  TheFarm.Scenes(SceneList.ListIndex) = TheFarm.Scenes(SceneList.ListIndex+1)		  		  TheFarm.Scenes(SceneList.ListIndex+1) = swapScene		  		  UpdateSceneList		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub MoveSceneToBottom()		  Dim swapScene As FarmScene		  Dim swapFrom, swapWith As Integer		  		  swapWith = SceneList.LastIndex		  swapFrom = SceneList.ListIndex		  		  // We need to sort all of the scenes down one position to the position of the one moving to the top		  do		    swapScene = TheFarm.Scenes(swapFrom)		    		    TheFarm.Scenes(swapFrom) = TheFarm.Scenes(swapWith)		    		    TheFarm.Scenes(swapWith) = swapScene		    		    swapWith = swapWith - 1		  loop until swapWith = swapFrom		  		  UpdateSceneList		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub MoveSceneToTop()		  Dim swapScene As FarmScene		  Dim swapFrom, swapWith As Integer		  		  swapWith = 0		  swapFrom = SceneList.ListIndex		  		  // We need to sort all of the scenes down one position to the position of the one moving to the top		  do		    swapScene = TheFarm.Scenes(swapFrom)		    		    TheFarm.Scenes(swapFrom) = TheFarm.Scenes(swapWith)		    		    TheFarm.Scenes(swapWith) = swapScene		    		    swapWith = swapWith + 1		  loop until swapWith = swapFrom		  		  UpdateSceneList		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub MoveSceneUp()		  Dim swapScene As FarmScene		  		  swapScene = TheFarm.Scenes(SceneList.ListIndex)		  		  TheFarm.Scenes(SceneList.ListIndex) = TheFarm.Scenes(SceneList.ListIndex-1)		  		  TheFarm.Scenes(SceneList.ListIndex-1) = swapScene		  		  UpdateSceneList		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ReadServerPrefs()		  Dim f as FolderItem		  Dim tIn As TextInputStream		  Dim version as String		  		  SetDefaults()		  		  #if TargetMacOS		    f = GetFolderItem(SpecialFolder.Preferences.AbsolutePath + "FrameWardenData:Server.txt")		  #elseif TargetWin32		    f = GetFolderItem(SpecialFolder.Preferences.AbsolutePath + "\FrameWardenData\Server.txt")		  #endif		  		  if f <> nil and f.exists then		    tIn = f.OpenAsTextFile		    		    version = tIn.ReadLine		    		    if InStr(version, "Frame Warden") = 0 then		      GOTO defaults		    end if		    		    // If it isn't 102 format, then we need to read the old format		    if InStr(version, "102") = 0 then		      #if TargetMacOS then		        f = GetFolderItem(SpecialFolder.Preferences.AbsolutePath + "FrameWardenData:ServerScenes.txt")		      #elseif TargetWin32 then		        f = GetFolderItem(SpecialFolder.Preferences.AbsolutePath + "\FrameWardenData\ServerScenes.txt")		      #endif		      		      ReadServerPrefs101(tIn)		      		      f.Delete		      		      return		    end if		    		    // This is where we begin reading prefs format 102 and later		    ReadServerPrefs102(tIn)		    		    // License Agreement Line		    if gAgreeToLicense = false then		      LicenseAgreementWindow.Show		    end if		    		    return		  End if		  		  		  defaults:		  		  LicenseAgreementWindow.Show		  UpdateLicenseInfo("")		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ReadServerPrefs101(Byref tIn As TextInputStream)		  gLicenseKey.Key = tIn.ReadLine		  		  gModoPath = tIn.ReadLine		  gNoResponseRelaunchTime = Val(tIn.ReadLine)		  gDefaultMaxFrameTime = Val(tIn.ReadLine)		  		  // License Agreement Line		  if tIn.ReadLine <> "1" then		    gAgreeToLicense = False		    LicenseAgreementWindow.Show		  else		    gAgreeToLicense = True		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ReadServerPrefs102(Byref tIn As TextInputStream)		  While Not tIn.EOF		    ReadServerPrefsLine(tIn.ReadLine)		  wend		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ReadServerPrefsLine(line As String)		  Dim tag, data as String		  		  tag = line.Left(line.InStr(">"))		  data = line.Right(line.Len()-line.InStr(">"))		  		  Select Case tag		  Case "LKEY>"		    gLicenseKey.Key = data		    		  Case "MODOPATH>"		    gModoPath = data		    		  Case "MODOLICENSEPATH>"		    gModoLicensePath = data		    		  Case "RELAUNCHTIME>"		    gNoResponseRelaunchTime = Val(data)		    		  Case "MAXFRAMETIME>"		    gDefaultMaxFrameTime = Val(data)		    		  Case "SHAREDFOLDER>"		    gSharedFolder = data		    		  CASE "BUCKETNODECOUNT>"		    gDefaultBucketNodeCount = Val(data)		    		  CASE "BAKEBORDERSIZE>"		    gBakeBorderSize = Val(data)		    		  CASE "SHOWPROGRESS>"		    if data = "1" then		      gShowProgress = true		    else		      gShowProgress = false		    end if		    		  Case "GEOMETRYCACHESIZE>"		    gGeometryCacheSize = Val(data)		    		  Case "LICENSEAGREE>"		    if data = "1" then		      gAgreeToLicense = True		    else		      gAgreeToLicense = False		    end if		    		  End Select		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SetDefaults()		  // These are defaults if we didn't return from the if statement		  gNoResponseRelaunchTime = 60		  gDefaultMaxFrameTime = 45		  gDefaultBucketNodeCount = 10		  		  gGeometryCacheSize = 1024		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub UpdateNodeInList(nodeName As String)		  Dim i, nodeIndex As Int32		  Dim nameColumn, statusColumn, addressColumn, groupColumn, sceneIDColumn, platformColumn As Int8		  		  nameColumn = 0		  statusColumn = 1		  addressColumn = 2		  groupColumn = 3		  sceneIDColumn = 4		  platformColumn = 5		  		  nodeIndex = TheFarm.GetNodeIndexWithName(nodeName)		  		  if NodeList.ListCount > 0 then		    for i = 0 to NodeList.ListCount - 1		      if NodeList.Cell(i, nameColumn) = nodeName then		        Select Case TheFarm.Nodes(nodeIndex).Command		        Case nc.render		          NodeList.Cell(i, statusColumn) = "Rendering frame: " + Str(TheFarm.Nodes(nodeIndex).frameToRender)		        Case nc.loadScene		          NodeList.Cell(i, statusColumn) = "Loading Scene"		        Case nc.noCommand, nc.SelectRenderItem		          if Not TheFarm.Nodes(nodeIndex).Rendering then		            NodeList.Cell(i, statusColumn) = "Idle"		          end if		        Case nc.quit		          if Not TheFarm.Nodes(nodeIndex).Rendering then		            NodeList.Cell(i, statusColumn) = "Quit"		          end if		        End Select		        		        NodeList.Cell(i, addressColumn) = TheFarm.Nodes(nodeIndex).ModoSocket.Address		        		        // Primary and secondary groups		        // If the secondary is different from the primary, make sure we say "1 & 2" or something like that		        NodeList.Cell(i, groupColumn) = Str(TheFarm.Nodes(nodeIndex).PrimaryGroup)		        		        if TheFarm.Nodes(nodeIndex).PrimaryGroup <> TheFarm.Nodes(nodeIndex).SecondaryGroup then		          NodeList.Cell(i, groupColumn) = NodeList.Cell(i, groupColumn) + " & " + Str(TheFarm.Nodes(nodeIndex).SecondaryGroup)		        end if		        		        if TheFarm.Nodes(nodeIndex).CurrentSceneID = 0 then		          NodeList.Cell(i, sceneIDColumn) = "No Scene"		        else		          NodeList.Cell(i, sceneIDColumn) = Str(TheFarm.Nodes(nodeIndex).CurrentSceneID)		        end if		        		        NodeList.Cell(i, platformColumn) = TheFarm.Nodes(nodeIndex).Platform		        		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub UpdateNodesContextualMenu(row As Integer)		  NodeContextualMenu.DeleteAllRows		  		  if TheFarm.Nodes.Ubound <> -1 then		    NodeContextualMenu.AddRow "(Re)launch All Nodes"		    NodeContextualMenu.AddSeparator		  end if		  		  if row <> -1 then		    NodeContextualMenu.AddRow "Launch Node"		    NodeContextualMenu.AddRow "Kill Node"		    NodeContextualMenu.AddSeparator		    NodeContextualMenu.AddRow "Remove Node"		    NodeContextualMenu.AddSeparator		  end if		  		  NodeContextualMenu.AddRow "Quit All Nodes"		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub UpdateSceneList()		  Dim i as Int32		  		  TheFarm.UpdateAllScenesStatus		  		  if TheFarm.Scenes.Ubound <> -1 then		    for i = 0 to TheFarm.Scenes.Ubound		      SceneList.Cell(i,0) = TheFarm.Scenes(i).File.Name		      		      // Scene status		      Select Case TheFarm.Scenes(i).Status		      Case FarmScene.snStopped		        SceneList.Cell(i,1) = "Stopped"		      Case FarmScene.snQueued		        SceneList.Cell(i,1) = "Queued"		      Case FarmScene.snRendering		        SceneList.Cell(i,1) = "Rendering"		      Case FarmScene.snDone		        SceneList.Cell(i,1) = "Done"		      Case Else		        SceneList.Cell(i,1) = "Setting Parameters"		      End Select		      		      // Scene Range		      SceneList.Cell(i, 2) = Str(TheFarm.Scenes(i).FirstFrame) + " - " + Str(TheFarm.Scenes(i).LastFrame) + " by " + Str(TheFarm.Scenes(i).FrameStep)		      		      // Scene ID		      SceneList.Cell(i, 3) = Str(TheFarm.Scenes(i).ID)		      		      // Render Groups		      SceneList.Cell(i, 4) = Str(TheFarm.Scenes(i).Group_Primary)		      		      SceneList.Cell(i, 5) = "* None *"		      		      if TheFarm.Scenes(i).VMAP.Ubound > -1 then		        if TheFarm.Scenes(i).VMAPIndex > -1 then		          SceneList.Cell(i, 5) = TheFarm.Scenes(i).VMAP(TheFarm.Scenes(i).VMAPIndex)		        end if		      end if		      		      if TheFarm.Scenes(i).Group_Primary <> TheFarm.Scenes(i).Group_Secondary then		        SceneList.Cell(i, 4) = SceneList.Cell(i, 4) + " & " + Str(TheFarm.Scenes(i).Group_Secondary)		      end if		    next		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub UpdateScenesContextualMenu(row as Integer)		  SceneContextualMenu.DeleteAllRows		  SceneContextualMenu.AddRow "Add Scene"		  		  // If a scene is selected		  if row <> -1 then		    SceneContextualMenu.AddSeparator		    SceneContextualMenu.AddRow "Start Scene"		    SceneContextualMenu.AddRow "Stop Scene"		    SceneContextualMenu.AddRow "Restart Scene"		    		    if SceneList.ListCount > 1 then		      SceneContextualMenu.AddSeparator		      		      if row <> 0 then		        SceneContextualMenu.AddRow "Move Priority Up"		      end if		      		      if row <> SceneList.ListCount-1 then		        SceneContextualMenu.AddRow "Move Priority Down"		      end if		      		      if row <> 0 then		        SceneContextualMenu.AddRow "Move Priority To Top"		      end if		      		      if row <> SceneList.ListCount-1 then		        SceneContextualMenu.AddRow "Move Priority To Bottom"		      end if		    end if		    		    SceneContextualMenu.AddSeparator		    SceneContextualMenu.AddRow "Clear Scene"		  end if		  		  if TheFarm.Scenes.Ubound >= 0 then		    if row = -1 then		      SceneContextualMenu.AddSeparator		    end if		    		    SceneContextualMenu.AddRow "Clear Finished Scenes"		    SceneContextualMenu.AddRow "Clear All Scenes"		    		    if row <> -1 then		      SceneContextualMenu.AddSeparator		      SceneContextualMenu.AddRow "Statistics"		    end if		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub WriteServerPrefs()		  Dim f as FolderItem		  Dim tOut As TextOutputStream		  		  #if TargetMacOS then		    f = GetFolderItem(SpecialFolder.Preferences.AbsolutePath + "FrameWardenData")		  #elseif TargetWin32 then		    f = GetFolderItem(SpecialFolder.Preferences.AbsolutePath + "\FrameWardenData")		  #endif		  		  if NOT f.Exists then		    f.CreateAsFolder		  end if		  		  		  // Write the Preferences data		  tOut = f.Child("Server.txt").CreateTextFile		  		  if tOut <> nil then		    // Frame Warden License Prefs		    tOut.WriteLine Str("Frame Warden 102")		    tOut.WriteLine "LKEY>" + gLicenseKey.Key		    		    if gAgreeToLicense then		      tOut.WriteLine "LICENSEAGREE>1"		    else		      tOut.WriteLine "LICENSEAGREE>0"		    end if		    		    // General Prefs		    tOut.WriteLine "MODOPATH>" + gModoPath		    tOut.WriteLine "RELAUNCHTIME>" + Str(gNoResponseRelaunchTime)		    tOut.WriteLine "MAXFRAMETIME>" + Str(gDefaultMaxFrameTime)		    		    // Show modo progress?		    if gShowProgress then		      tOut.WriteLine "SHOWPROGRESS>" + "1"		    else		      tOut.WriteLine "SHOWPROGRESS>" + "0"		    end if		    		    tOut.WriteLine "GEOMETRYCACHESIZE>" + Str(gGeometryCacheSize)		    		    // Write border baking size		    tOut.WriteLine "BAKEBORDERSIZE>" + Str(gBakeBorderSize)		    		    // Bucket Rendering Prefs		    tOut.WriteLine "MODOLICENSEPATH>" + gModoLicensePath		    tOut.WriteLine "SHAREDFOLDER>" + gSharedFolder		    tOut.WriteLine "BUCKETNODECOUNT>" + Str(gDefaultBucketNodeCount)		  end if		  		  tOut.Close		  		  		  // Write the scenes data		  tOut = f.Child("ServerScenes.txt").CreateTextFile		  		  if tOut <> nil then		    tOut.Write TheFarm.GetFarmSaveData()		  end if		  		  tOut.Close		End Sub	#tag EndMethod	#tag Property, Flags = &h0		ClientCommand As String	#tag EndProperty	#tag Property, Flags = &h0		ClientCommandSent As Boolean	#tag EndProperty	#tag Property, Flags = &h0		dragItems(-1) As FolderItem	#tag EndProperty#tag EndWindowCode#tag Events SceneList	#tag Event		Function MouseDown(x As Integer, y As Integer) As Boolean		  Dim row as integer		  		  if IsContextualClick then		    row = me.RowFromXY(x, y)		    		    SceneList.ListIndex = row		    SceneList.Refresh		    		    UpdateScenesContextualMenu(row)		    		    SceneContextualMenu.open		    return true		  end if		End Function	#tag EndEvent	#tag Event		Sub DoubleClick()		  if SceneList.ListIndex <> -1 then		    SceneStatisticsWindow.Show		    SceneStatisticsWindow.StatScene = TheFarm.Scenes(SceneList.ListIndex)		    SceneStatisticsWindow.UpdateList()		  end if		End Sub	#tag EndEvent	#tag Event		Sub Open()		  me.AcceptFileDrop GenericFileTypes.Modo		End Sub	#tag EndEvent	#tag Event		Sub DropObject(obj As DragItem, action As Integer)		  do		    dragItems.Append obj.FolderItem		  loop until not obj.NextItem()		  		End Sub	#tag EndEvent#tag EndEvents#tag Events NodeList	#tag Event		Function MouseDown(x As Integer, y As Integer) As Boolean		  Dim row As Integer		  		  if IsContextualClick then		    row = me.RowFromXY(x, y)		    		    NodeList.ListIndex = row		    NodeList.Refresh		    		    UpdateNodesContextualMenu(row)		    		    NodeContextualMenu.Open		    return true		  end if		End Function	#tag EndEvent#tag EndEvents#tag Events FireUpdate	#tag Event		Sub Action()		  // Updates all scene and node status's and commands		  		  TheFarm.UpdateNextNode()		  UpdateSceneList()		  		  CheckDragItems()		End Sub	#tag EndEvent#tag EndEvents#tag Events CheckStatusTimer	#tag Event		Sub Action()		  Static nodeIndex As Integer		  Dim DidClientCommandsConnect As Boolean		  		  if not Server_Socket.IsConnected then		    Server_Socket.Listen		  end if		  		  if nodeIndex > TheFarm.Nodes.Ubound then		    nodeIndex = 0		  end if		  		  // Go through each node if nodes exist		  if TheFarm.Nodes.Ubound <> -1 then		    // If the Client hasn't received the Modo App Path, then, make sure we send the data		    if NOT TheFarm.Nodes(nodeIndex).HasAppPath then		      DoSendClientModoAppPath(nodeIndex)		    end if		    		    if NOT TheFarm.Nodes(nodeIndex).HasLicensePath then		      DoSendClientModoLicensePath(nodeIndex)		    end if		    		    // Try and connect each Node Class' TCP port to the client's Modo App (via Python Script)		    if NOT TheFarm.Nodes(nodeIndex).ModoSocket.IsConnected then		      TheFarm.Nodes(nodeIndex).ModoSocket.Port = 47598		      		      if NOT gSimulationMode then		        TheFarm.Nodes(nodeIndex).ModoSocket.Connect		      end if		    end if		  end if		  		  nodeIndex = nodeIndex + 1		End Sub	#tag EndEvent#tag EndEvents#tag Events Server_Socket	#tag Event		Sub ReceivedMessage(command as Integer, data as String)		  Dim index as Integer		  		  Select Case command		  Case Int32(TCP.NodeCheck)		    index = AddNewNode(data)		    me.SendMessage(Int32(TCP.NodeCheck), "ack-init")		    		  Case Int32(TCP.NodeInit)		    // Add the node		    index = AddNewNode(data)		    		    // If it already existed then reset it		    if index <> -1 then		      WriteToLog "Reset Node: Server_Socket.ReceivedMessage", LogFuncs.General		      TheFarm.Nodes(index).Reset		    end if		    		    // Send an acknowledgement		    me.SendMessage(Int32(TCP.NodeInit), "ack-init")		    		  end select		End Sub	#tag EndEvent	#tag Event		Sub Connected()		  me.SendMessage(Int32(TCP.Check), "ack-init")		End Sub	#tag EndEvent#tag EndEvents#tag Events DisconnectTimer	#tag Event		Sub Action()		  if Server_Socket.IsConnected then		    Server_Socket.Disconnect		  end if		End Sub	#tag EndEvent#tag EndEvents#tag Events RelaunchNodeTimer	#tag Event		Sub Action()		  Dim nodeIndex as Integer		  		  nodeIndex = TheFarm.GetRelaunchNode()		  		  if nodeIndex <> -1 then		    if TheFarm.Nodes(nodeIndex).IsNodeFrameOverdue then		      DoNodeRelaunch(nodeIndex)		      WriteToLog "Relaunched Node: " + TheFarm.Nodes(nodeIndex).Name, LogFuncs.General		    end if		  end if		End Sub	#tag EndEvent#tag EndEvents#tag Events LaunchAllNodesTimer	#tag Event		Sub Action()		  DoLaunchAllNodes()		  me.mode = 0		End Sub	#tag EndEvent#tag EndEvents#tag Events NodeContextualMenu	#tag Event		Sub Action(item As String)		  Dim nodeIndex As Integer		  		  nodeIndex = TheFarm.GetNodeIndexWithName(NodeList.Cell(NodeList.ListIndex, 0))		  		  Select Case item		  Case "(Re)launch All Nodes"		    DoQuitAllNodes()		    LaunchAllNodesTimer.Mode = 1		    		  Case "Launch Node"		    if NodeList.ListIndex <> -1 then		      DoNodeLaunch(TheFarm.GetNodeIndexWithName(NodeList.Cell(NodeList.ListIndex, 0)))		    end if		  Case "Kill Node"		    if NodeList.ListIndex <> -1 then		      DoNodeKill(nodeIndex)		    end if		  Case "Remove Node"		    TheFarm.Nodes.Remove NodeList.ListIndex		    NodeList.RemoveRow(NodeList.ListIndex)		  Case "Quit All Nodes"		    DoQuitAllNodes		  End Select		End Sub	#tag EndEvent#tag EndEvents#tag Events SceneContextualMenu	#tag Event		Sub Action(item As String)		  Dim result as Integer		  		  Select Case item		  Case "Add Scene"		    DoAddScene		  Case "Start Scene"		    DoStartScene		  Case"Stop Scene"		    DoStopScene		  Case"Restart Scene"		    DoRestartScene()		  Case "Move Priority Up"		    MoveSceneUp()		  Case "Move Priority Down"		    MoveSceneDown()		  Case "Move Priority To Top"		    MoveSceneToTop()		  Case "Move Priority To Bottom"		    MoveSceneToBottom()		  Case "Clear Scene"		    DoClearScene		  Case "Clear Finished Scenes"		    DoClearFinishedScenes		  Case "Clear All Scenes"		    result = MsgBox("Are you sure you want to delete all scenes?", 1)		    		    if result = 1 then		      DoClearAllScenes		    end if		  Case "Properties"		    MsgBox "Properties"		    		  Case "Statistics"		    SceneStatisticsWindow.Show		    SceneStatisticsWindow.StatScene = TheFarm.Scenes(SceneList.ListIndex)		    SceneStatisticsWindow.UpdateList()		    		  end select		End Sub	#tag EndEvent#tag EndEvents