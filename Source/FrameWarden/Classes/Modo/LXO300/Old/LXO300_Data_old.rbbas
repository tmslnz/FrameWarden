#tag ClassProtected Class LXO300_Data_old	#tag Method, Flags = &h0		Function GetItemName(index As Int32) As String		  Dim linkIndex As Int32		  		  linkIndex = me.GetLinkIndex(index)		  		  if linkIndex = -1 then		    return LXO_Chunks(index+FirstITEM).GetItemName		  end if		  		  return LXO_Chunks(linkIndex).GetItemName		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetItemType(index As Int32) As String		  if index < ChunkCount then		    return LXO_Chunks(index).GetItemType		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetLinkIndex(index As Int32) As Int32		  // This function finds if a LINK exists and will return the index of the linked ITEM		  		  Dim inpInt, datLen as Int32		  Dim inpStr As String		  		  if index = -1 then		    return -1		  end if		  		  index = index + FirstITEM // Make sure we're checking starting at the first ITEM chunk		  		  LXO_Chunks(index).dataMarker = 0		  		  inpStr = LXO_Chunks(index).Read_String		  inpStr = LXO_Chunks(index).Read_String		  inpInt = LXO_Chunks(index).Read_Long		  		  while LXO_Chunks(index).dataMarker < LXO_Chunks(index).Size		    inpStr = LXO_Chunks(index).GetNextChunkType		    		    select case inpStr		    case "LINK"		      inpInt = LXO_Chunks(index).Read_UShort // The data length		      		      inpStr = LXO_Chunks(index).Read_String		      		      inpInt = LXO_Chunks(index).Read_Long		      		      if inpStr = "xfrmCore" then		        return GetLinkIndex(inpInt)		      else		        LXO_Chunks(index).dataMarker = LXO_Chunks(index).dataMarker + 4		      end if		      		    else		      datLen = LXO_Chunks(index).Read_UShort		      		      LXO_Chunks(index).dataMarker = LXO_Chunks(index).dataMarker + datLen		    end select		  wend		  		  return index		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetLXOSize() As Int32		  Dim i as Int32		  Dim dataSize As Int32		  		  dataSize = 4  // We start at 4 because the 4 bytes from "LXOB" is going to be written from the "FORM????LXOB" in the docs		  		  for i = 0 to ChunkCount - 1		    dataSize = dataSize + LXO_Chunks(i).Size + 8		  next		  		  return dataSize		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetLXO_String(chunkNum As Int32) As String		  Dim mystr As String		  Dim inByte As Int32		  		  inByte = binFile.ReadByte		  		  while inByte <> 0		    mystr = mystr + Chr(inByte)		    inByte = binFile.ReadByte		  wend		  		  return mystr		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function GetRange(flag As Int32) As Int32		  Dim i, refID as Integer		  		  for i = me.FirstITEM to me.ChunkCount-1		    if me.LXO_Chunks(i).GetItemType = "polyRender" then		      refID = me.LXO_Chunks(i).GetRefID		    end if		  next		  		  return gNoNumber		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetRange_FirstFrame() As Int32		  Return GetRange(1)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetRange_LastFrame() As Int32		  Return GetRange(2)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetRange_Step() As Int32		  Return GetRange(3)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetRenderExtension() As String		  Dim i as integer		  		  for i = FirstITEM to ChunkCount-1		    if me.GetItemType(i) = "renderOutput" then		      if LXO_Chunks(i).GetRenderPath <> "" then		        Return LXO_Chunks(i).GetRenderExtension		      end if		    end if		  next		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetRenderPath() As String		  Dim i as integer		  Dim path As String		  		  for i = FirstITEM to ChunkCount-1		    if me.GetItemType(i) = "renderOutput" then		      path = LXO_Chunks(i).GetRenderPath()		      		      if path <> "" then		        Return path		      end if		    end if		  next		  		  return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function OpenLXO() As Boolean		  Dim f as folderItem		  		  f = GetOpenFolderItem("modo")		  		  if f <> nil then		    ReadLXO(f)		    return true		  end if		  		  return false		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ReadLXO(f As folderItem)		  Dim checkString As String		  Dim i, inByte as Int32		  		  if f <> nil then		    if f.Exists then		      LXO_File = f		      		      binFile = LXO_File.OpenAsBinaryFile		      		      //ProgressWindow.OpenWithLabel(LXO_File.Name)		      //ProgressWindow.DataProgress.maximum = binFile.Length		      		      LXO_Data = NewMemoryBlock(12) // This is the size in bytes of the header		      		      LXO_Data.Long(binFile.position) = binFile.ReadLong // Read "FORM"		      LXO_Data.Long(binFile.position) = binFile.ReadLong // Read Data Size (starting immediately after this LONG is read)		      LXO_Data.Long(binFile.position) = binFile.ReadLong  // Read "LXOB"		      		      FirstENVL = -1 // Reset this marker so that we can set it each time a new Modo file is opened		      FirstITEM = -1 // same idea as ENVL		      		      // ReadChunks		      While not binFile.EOF		        ChunkCount = ChunkCount + 1		        		        Redim LXO_Chunks(ChunkCount)		        		        LXO_Chunks(ChunkCount-1) = new LXO300_Chunk_old		        		        LXO_Chunks(ChunkCount-1).ReadInChunk(binFile)		        		        if FirstENVL = -1 then // If we haven't found the first ENVL yet		          if LXO_Chunks(ChunkCount-1).GetChunkType = "ENVL" then // If it's the type of ENVL		            FirstENVL = ChunkCount - 1 // Then define it		          end if		        end if		        		        if FirstITEM = -1 then // If we haven't found the first ITEM yet		          if LXO_Chunks(ChunkCount-1).GetChunkType = "ITEM" then // If it's the type of ITEM		            FirstITEM = ChunkCount - 1 // Then define it		          end if		        end if		        		        //ProgressWindow.DataProgress.value = binFile.position		        //ProgressWindow.DataProgress.Refresh False		      Wend		      		      //ProgressWindow.DataProgress.maximum = 0		      //ProgressWindow.DataProgress.Refresh False		      		      //ProgressWindow.close		      		      binFile.Close		    end if		  end if		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected binFile As BinaryStream	#tag EndProperty	#tag Property, Flags = &h0		ChunkCount As Int32	#tag EndProperty	#tag Property, Flags = &h0		FirstENVL As Int32	#tag EndProperty	#tag Property, Flags = &h0		FirstITEM As Int32	#tag EndProperty	#tag Property, Flags = &h0		LXO_Chunks(0) As LXO300_Chunk_old	#tag EndProperty	#tag Property, Flags = &h0		LXO_Data As MemoryBlock	#tag EndProperty	#tag Property, Flags = &h0		LXO_File As FolderItem	#tag EndProperty	#tag Property, Flags = &h0		LXO_FileOut As folderItem	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass